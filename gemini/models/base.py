import re
from datetime import datetime
from typing import List, Dict

from loguru import logger
from httpx import AsyncClient, HTTPError
from pydantic import BaseModel, root_validator

class Image(BaseModel):
    """
    A single image object returned from Gemini.
    """
    url: str
    title: str = "[Image]"
    alt: str = ""

    def __str__(self) -> str:
        return f"{self.title}({self.url}) - {self.alt}"

    def __repr__(self) -> str:
        return f"Image(title='{self.title}', url='{self._truncated_url()}', alt='{self.alt}')"

    def _truncated_url(self) -> str:
        return self.url if len(self.url) <= 20 else self.url[:8] + '...' + self.url[-12:]

    async def save(self, path: str = "temp/", filename: str = None, cookies: Dict[str, str] = None) -> None:
        """
        Save the image to disk.
        """
        try:
            filename = filename or re.search(r"^(.*\.\w+)", self.url.split("/")[-1]).group()
        except AttributeError:
            filename = self.url.split("/")[-1]

        async with AsyncClient(follow_redirects=True, cookies=cookies) as client:
            response = await client.get(self.url)
            if response.status_code == 200:
                content_type = response.headers.get("content-type")
                if content_type and "image" not in content_type:
                    logger.warning(
                        f"Content type of {filename} is not image, but {content_type}."
                    )

                with open(f"{path}{filename}", "wb") as file:
                    file.write(response.content)
            else:
                raise HTTPError(
                    f"Error downloading image: {response.status_code} {response.reason_phrase}"
                )


class WebImage(Image):
    """
    Image retrieved from web. Returned when ask Gemini to "SEND an image of [something]".
    """

    pass


class GeneratedImage(Image):
    """
    Image generated by ImageFX, Google's AI image generator. Returned when ask Gemini to "GENERATE an image of [something]".
    """

    cookies: Dict[str, str]

    @root_validator
    def validate_cookies(cls, values: Dict[str, str]) -> Dict[str, str]:
        if "__Secure-1PSID" not in values or "__Secure-1PSIDTS" not in values:
            raise ValueError("Cookies must contain '__Secure-1PSID' and '__Secure-1PSIDTS'")
        return values

    async def save(self, path: str = "temp/", filename: str = None) -> None:
        """
        Save the image to disk.
        """
        await super().save(
            path,
            filename or f"{datetime.now().strftime('%Y%m%d%H%M%S')}_{self.url[-10:]}.png",
            self.cookies,
        )


class Candidate(BaseModel):
    """
    A single reply candidate object in the model output.
    """

    rcid: str
    text: str
    web_images: List[WebImage] = []
    generated_images: List[GeneratedImage] = []

    def __str__(self) -> str:
        return self.text

    def __repr__(self) -> str:
        return f"Candidate(rcid='{self.rcid}', text='{self._truncated_text()}', images={self.images})"

    def _truncated_text(self) -> str:
        return self.text if len(self.text) <= 20 else self.text[:20] + '...'

    @property
    def images(self) -> List[Image]:
        return self.web_images + self.generated_images


class ModelOutput(BaseModel):
    """
    Classified output from gemini.google.com
    """

    metadata: List[str]
    candidates: List[Candidate]
    chosen: int = 0

    def __str__(self) -> str:
        return self.text

    def __repr__(self) -> str:
        return f"ModelOutput(metadata={self.metadata}, chosen={self.chosen}, candidates={self.candidates})"

    @property
    def text(self) -> str:
        return self.candidates[self.chosen].text

    @property
    def images(self) -> List[Image]:
        return self.candidates[self.chosen].images

    @property
    def rcid(self) -> str:
        return self.candidates[self.chosen].rcid
